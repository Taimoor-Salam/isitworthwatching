{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Taimoor\\\\Documents\\\\ReactApps\\\\isitworthwatching\\\\isitworthwatching\\\\src\\\\components\\\\MoviePage.js\",\n    _s = $RefreshSig$();\n\nimport \"./MoviePage.css\";\nimport PosterCard from \"./PosterCard\";\nimport InfoCard from \"./InfoCard\";\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet MOVIEDATA_ARRAY = [];\nlet RATINGSDATA_ARRAY = [];\nlet IIWW_RATING = 0;\nlet imdbval = 0;\nlet rotval = 0;\nlet metvalArray = [];\nlet imdbR = false;\nlet rotR = false;\nlet metR = false;\n\nconst MoviePage = props => {\n  _s();\n\n  const [movieData, setMovieData] = useState([]);\n  const [ratingsData, setRatingsData] = useState([]);\n  const [iiwwRating, setiiwwRating] = useState([0]);\n\n  const getHandler = async () => {\n    try {\n      axios.get(\"https://www.omdbapi.com/?i=\" + props.id + \"&apikey=bf994a28\").then(res => {\n        MOVIEDATA_ARRAY = res.data;\n        setMovieData(MOVIEDATA_ARRAY);\n        RATINGSDATA_ARRAY = MOVIEDATA_ARRAY.Ratings;\n        setRatingsData(RATINGSDATA_ARRAY);\n        createIIWWRating();\n      }).catch(err => {\n        console.log(err);\n      });\n    } catch (error) {\n      console.log(\"fail\");\n    }\n  };\n\n  useEffect(() => {\n    getHandler();\n  }, []);\n\n  const createIIWWRating = () => {\n    ratingsData.map(movie => {\n      if (movie.Source === \"Internet Movie Database\") {\n        const imdbvalArray = movie.Value.split(\"/\");\n        imdbval = imdbvalArray[0] * 10;\n        imdbR = true;\n      }\n\n      if (movie.Source === \"Rotten Tomatoes\") {\n        rotval = movie.Value.replace(\"%\", \"\");\n        rotR = true;\n      }\n\n      if (movie.Source === \"Metacritic\") {\n        metvalArray = movie.Value.split(\"/\");\n        metR = true;\n      }\n    });\n\n    if (imdbR === true && rotR === false && metR === false) {\n      IIWW_RATING = parseInt(IIWW_RATING) + parseInt(imdbval);\n      imdbR = false;\n    } else if (imdbR === true && rotR === true && metR === false) {\n      IIWW_RATING = parseInt(IIWW_RATING) + parseInt(imdbval * 0.6);\n      IIWW_RATING = parseInt(IIWW_RATING) + parseInt(rotval * 0.4);\n      imdbR = false;\n      rotR = false;\n    } else if (imdbR === true && rotR === false && metR === true) {\n      IIWW_RATING = parseInt(IIWW_RATING) + parseInt(imdbval * 0.6);\n      IIWW_RATING = parseInt(IIWW_RATING) + parseInt(metvalArray[0] * 0.4);\n      imdbR = false;\n      metR = false;\n    } else if (imdbR === true && rotR === true && metR === true) {\n      IIWW_RATING = parseInt(IIWW_RATING) + parseInt(imdbval * 0.6);\n      IIWW_RATING = parseInt(IIWW_RATING) + parseInt(rotval * 0.2);\n      IIWW_RATING = parseInt(IIWW_RATING) + parseInt(metvalArray[0] * 0.2);\n      imdbR = false;\n      rotR = false;\n      metR = false;\n      console.log(IIWW_RATING);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"moviePageContainer\",\n    children: [/*#__PURE__*/_jsxDEV(PosterCard, {\n      id: props.id,\n      title: movieData.Title,\n      plot: movieData.Plot,\n      poster: movieData.Poster,\n      year: movieData.Released\n    }, props.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"ratingsContainer\",\n      children: [/*#__PURE__*/_jsxDEV(InfoCard, {\n        title: \"Is It Worth Watching?\",\n        rating: IIWW_RATING\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), ratingsData.map(movie => /*#__PURE__*/_jsxDEV(InfoCard, {\n        title: movie.Source,\n        rating: movie.Value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MoviePage, \"TihTQ99LG/tKn5Hx2E4WSIXCH7I=\");\n\n_c = MoviePage;\nexport default MoviePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MoviePage\");","map":{"version":3,"sources":["C:/Users/Taimoor/Documents/ReactApps/isitworthwatching/isitworthwatching/src/components/MoviePage.js"],"names":["PosterCard","InfoCard","axios","React","useEffect","useState","MOVIEDATA_ARRAY","RATINGSDATA_ARRAY","IIWW_RATING","imdbval","rotval","metvalArray","imdbR","rotR","metR","MoviePage","props","movieData","setMovieData","ratingsData","setRatingsData","iiwwRating","setiiwwRating","getHandler","get","id","then","res","data","Ratings","createIIWWRating","catch","err","console","log","error","map","movie","Source","imdbvalArray","Value","split","replace","parseInt","Title","Plot","Poster","Released"],"mappings":"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","sourcesContent":["import \"./MoviePage.css\";\r\nimport PosterCard from \"./PosterCard\";\r\nimport InfoCard from \"./InfoCard\";\r\nimport axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nlet MOVIEDATA_ARRAY = [];\r\nlet RATINGSDATA_ARRAY = [];\r\nlet IIWW_RATING = 0;\r\nlet imdbval = 0;\r\nlet rotval = 0;\r\nlet metvalArray = [];\r\n\r\nlet imdbR = false;\r\nlet rotR = false;\r\nlet metR = false;\r\n\r\n\r\nconst MoviePage = (props) => {\r\n  const [movieData, setMovieData] = useState([]);\r\n  const [ratingsData, setRatingsData] = useState([]);\r\n  const [iiwwRating, setiiwwRating] = useState([0]);\r\n\r\n  const getHandler = async () => {\r\n    try {\r\n      axios\r\n        .get(\"https://www.omdbapi.com/?i=\" + props.id + \"&apikey=bf994a28\")\r\n        .then((res) => {\r\n          MOVIEDATA_ARRAY = res.data;\r\n          setMovieData(MOVIEDATA_ARRAY);\r\n          RATINGSDATA_ARRAY = MOVIEDATA_ARRAY.Ratings;\r\n          setRatingsData(RATINGSDATA_ARRAY);\r\n          createIIWWRating();\r\n          \r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"fail\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getHandler();\r\n  },[]);\r\n\r\n  const createIIWWRating = () =>{\r\n      ratingsData.map((movie) => {\r\n          if (movie.Source === \"Internet Movie Database\"){\r\n            const imdbvalArray = movie.Value.split(\"/\");\r\n            imdbval = imdbvalArray[0] * 10;\r\n            imdbR = true;\r\n          }\r\n\r\n          if (movie.Source === \"Rotten Tomatoes\"){\r\n              rotval = movie.Value.replace(\"%\", \"\");\r\n              rotR = true;\r\n          }\r\n\r\n          if (movie.Source === \"Metacritic\"){\r\n              metvalArray = movie.Value.split(\"/\");\r\n              metR = true;\r\n          }\r\n        })\r\n\r\n          if (imdbR === true && rotR === false && metR === false){\r\n            IIWW_RATING = parseInt(IIWW_RATING) + parseInt(imdbval);\r\n            imdbR = false;\r\n          } else if (imdbR === true && rotR === true && metR === false){\r\n            IIWW_RATING = parseInt(IIWW_RATING) + parseInt(imdbval*0.6);\r\n            IIWW_RATING = parseInt(IIWW_RATING) + parseInt(rotval*0.4);\r\n            imdbR = false;\r\n            rotR = false;\r\n          } else if (imdbR === true && rotR === false && metR === true){\r\n            IIWW_RATING = parseInt(IIWW_RATING) + parseInt(imdbval*0.6);\r\n            IIWW_RATING = parseInt(IIWW_RATING) + parseInt(metvalArray[0]*0.4);\r\n            imdbR = false;\r\n            metR = false;\r\n          } else if (imdbR === true && rotR === true && metR === true){\r\n            IIWW_RATING = parseInt(IIWW_RATING) + parseInt(imdbval*0.6);\r\n            IIWW_RATING = parseInt(IIWW_RATING) + parseInt(rotval*0.2);\r\n            IIWW_RATING = parseInt(IIWW_RATING) + parseInt(metvalArray[0]*0.2);\r\n            imdbR = false;\r\n            rotR = false;\r\n            metR = false;\r\n            console.log(IIWW_RATING);\r\n          }\r\n\r\n  }\r\n\r\n  return (\r\n    <div className=\"moviePageContainer\">\r\n      <PosterCard\r\n        key={props.id}\r\n        id={props.id}\r\n        title={movieData.Title}\r\n        plot={movieData.Plot}\r\n        poster={movieData.Poster}\r\n        year={movieData.Released}\r\n      />\r\n      <ul className=\"ratingsContainer\">\r\n        <InfoCard title=\"Is It Worth Watching?\" rating={IIWW_RATING} /> \r\n        {ratingsData.map((movie) => (\r\n          <InfoCard title={movie.Source} rating={movie.Value} />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MoviePage;\r\n"]},"metadata":{},"sourceType":"module"}